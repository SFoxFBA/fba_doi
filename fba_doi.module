<?php

define('DATACITE_DOI_URL', 'mds.datacite.org/doi');
define('TEST_DATACITE_DOI_URL', 'test.datacite.org/mds/doi');
define('TEST_DATACITE_DOI_METADATA_URL', 'test.datacite.org/mds/metadata');

/**
 * A custom function to expand on the islandora_doi module
 * Returns a DOI if one exists in the Datacite system, or FALSE if not
 * 
 * @param string $doi - this is the pid with the colon removed
 * 
 * @return string|boolean
 * 
 */
function fba_check_doi($doi) {
  $prefix = islandora_doi_get_prefix();
  $doi = $prefix . '/' . $doi;

  $fullurl = islandora_doi_get_hostname() . '/' . $url;
  $data = drupal_query_string_encode(array('doi' => $doi, 'url' => $fullurl));

  //$request_url = 'https://' . variable_get('islandora_doi_username', '') . ':' 
  //. variable_get('islandora_doi_password', '') . '@' . DATACITE_DOI_URL;
  //SFOX custom url for testing only.
  $request_url = 'https://' . variable_get('islandora_doi_username', '') . ':'
      . variable_get('islandora_doi_password', '') . '@'
      . TEST_DATACITE_DOI_URL . '/' . $doi;

  $response = drupal_http_request($request_url, array('Content-Type' => 'application/x-www-form-urlencoded', 'charset' => 'UTF-8'), 'GET');

  if ($response->code == '200') {
    return $doi;
  }
  else {
    watchdog('islandora_doi', 'DOI check failed: ' . $response->data);
    return false;
  }
}

/**
 * Extracts information required for registering metadata and minting a doi
 * 
 * TODO: some handling on error conditions, i.e. islandora_doi_register_metadata
 * failing...
 * 
 * @param type $pid
 * @return type
 */
function mintdoi($pid) {
  module_load_include('module', 'islandora_doi', 'islandora_doi');
  module_load_include('inc', 'fedora_repository', 'api/tuque');

  $fedora_object = islandora_object_load($pid);
  $dtca = $fedora_object['DTCA'];
  $dtcacontent = $dtca->content;
  $dtcads = simplexml_load_string($dtcacontent);
  //
  $dc = $fedora_object['DC'];
  $dccontent = $dc->content;
  $dcds = simplexml_load_string($dccontent, NULL, NULL, 'http://purl.org/dc/elements/1.1/');
  $dctitle = (string) $dcds->title;
  //Need to create the xml for minting a doi for this object
  $prefix = islandora_doi_get_prefix();
  $reformattedpid = str_replace(':', '', $pid);
  //Use the creation date of the published object
  $createdate = (string) $dtcads->archivalPublicationDate;
  $version = (int) $dtcads->version;
  if ($version === 0) {
    $version = 1;
  }
  $datacitexml = create_datacite_xml($prefix, $pid, $dctitle, $version, $createdate, $dtcads->relatedParty);

  //1. Register DOI Metadata
  $metadatadoi = islandora_doi_register_metadata($reformattedpid, $datacitexml);
  if ($metadatadoi !== FALSE) {
    //2. Mint the DOI
    $minteddoi = islandora_doi_mint($reformattedpid, 'archive/' . $pid);
    if ($minteddoi !== FALSE) {
      //3. Add the doi to /dtca:Dataset/dtca:doi
      $sxmldtca = new SimpleXMLElement($dtcacontent);
      $sxmldtca->doi = $minteddoi;
      $fedora_object['DTCA']->content = $sxmldtca->asXML();
      return $minteddoi;
    }
    else {
      return FALSE;
    }
  }
  else {
    //metadata has failed for some reason (check watchdog logs
    return FALSE;
  }
}

/**
 * Format the xml that will be passed to the Datacite site 
 * 
 * @param type $prefix
 * @param type $pid
 * @param type $names
 * @param type $titletext
 * @return string
 */
function create_datacite_xml($prefix, $pid, $titletext, $version, $createdate, $relatedparty) {
  module_load_include('inc', 'sidora', 'includes/fba');

  $reformattedpid = str_replace(':', '', $pid);

  $newDom = new DOMDocument('1.0', 'utf-8');
  $newDom->formatOutput = TRUE;

  $rootEl = $newDom->createElement('resource');
  $rootEl->setAttribute('xmlns', 'http://datacite.org/schema/kernel-3');
  $rootEl->setAttribute('xmlns:xsi', 'http://www.w3.org/2001/XMLSchema-instance');
  $rootEl->setAttribute('xsi:schemaLocation', 'http://datacite.org/schema/kernel-3 http://schema.datacite.org/meta/kernel-3/metadata.xsd');

  $identifier = $newDom->createElement('identifier', $prefix . '/' . $reformattedpid);
  $identifier->setAttribute('identifierType', 'DOI');
  $rootEl->appendChild($identifier);
//
  $creatorlist = sidora_return_related_party_creators();
  $creators = $newDom->createElement('creators');
  foreach ($relatedparty as $relparty) {
    switch ($relparty['type']) {
      case 'corporate': {
          $role = (string) $relparty->corporateRole;
          $namepart = (string) $relparty->namePart;
          break;
        }
      case 'personal': {
          $role = (string) $relparty->personalRole;
          $namepart = (string) $relparty->namePart[0] . ', ' . $relparty->namePart[1];
          break;
        }
    }
    if (in_array($role, $creatorlist)) {
      $creator = $newDom->createElement('creator');
      $creatorname = $newDom->createElement('creatorName', $namepart);
      $creator->appendChild($creatorname);
      $creators->appendChild($creator);
    }
  }
  $rootEl->appendChild($creators);
//
  $titles = $newDom->createElement('titles');
  $title = $newDom->createElement('title', $titletext);
  $titles->appendChild($title);
  $rootEl->appendChild($titles);

  $publisher = $newDom->createElement('publisher', 'Freshwater Biological Association (FBA)');
  $rootEl->appendChild($publisher);

  $pubyear = $newDom->createElement('publicationYear', date("Y"));
  $rootEl->appendChild($pubyear);

  $datesdom = $newDom->createElement('dates');
  $createdatedom = $newDom->createElement('date', $createdate);
  $createdatedom->setAttribute('dateType', 'Created');
  $datesdom->appendChild($createdatedom);
  $rootEl->appendChild($datesdom);
//
  $contributors = $newDom->createElement('contributors');
  $contributorlist = sidora_return_related_party_contributors();
  foreach ($relatedparty as $relparty) {
    switch ($relparty['type']) {
      case 'corporate': {
          $role = (string) $relparty->corporateRole;
          $namepart = (string) $relparty->namePart;
          break;
        }
      case 'personal': {
          $role = (string) $relparty->personalRole;
          $namepart = (string) $relparty->namePart[0] . ', ' . $relparty->namePart[1];
          break;
        }
    }
    if (in_array($role, $contributorlist)) {
      $contributor = $newDom->createElement('contributor');
      $conttype = sidora_translate_related_party_contributor_for_datacite($role);
      $contributor->setAttribute('contributorType', $conttype);
      $contname = $newDom->createElement('contributorName', $namepart);
      $contributor->appendChild($contname);
      $contributors->appendChild($contributor);
    }
  }
  //HostingInstitution is always hardcoded string
  $contributor = $newDom->createElement('contributor');
  $contributor->setAttribute('contributorType', 'HostingInstitution');
  $contname = $newDom->createElement('contributorName', 'Freshwater Biological Association');
  $contributor->appendChild($contname);
  $contributors->appendChild($contributor);
  $rootEl->appendChild($contributors);
//
  $versiondom = $newDom->createElement('version', $version);
  $rootEl->appendChild($versiondom);
  $newDom->appendChild($rootEl);
//
  $datacitexml = $newDom->saveXML();
  return $datacitexml;
}
